



import java.util.*;



class Hello {
    
    
    public static void main(String[] args){
        
       Scanner sc= new Scanner(System.in);
       int t = sc.nextInt();
       while(t-->0){
           
           int n = sc.nextInt();
           int[] a = new int[n];
           int k = sc.nextInt();
           Map<Integer,Integer> mp = new HashMap<>();
           for (int i = 0; i < n; i++) {
               a[i] = sc.nextInt();
               
           }
           int[][] ne = new int[n+1][n+1];
           
           int ans =0,vc =0,l =1;
           for(int i=0;i<n;i++){
               mp.clear();
              for(int j= i;j<n;j++){
                   ne[i][j] = (j==0)?0:ne[i][j-1];
              if(mp.containsKey(a[j])){
                  if(mp.get(a[j])==1){
                      ne[i][j]++;
                  }
                  ne[i][j]++;
              }
             
                  if(mp.containsKey(a[j])){
                      int h = mp.get(a[j]);
                      mp.replace(a[j], h+1);
                  }
                  else{
                      mp.put(a[j], 1);
                  }
                  
              
              }
           }
           
           ans = (int)1e18;
           int table =100;
           int[][] dp = new int[101][1001];
          
           for(int i=1;i<n+1;i++){
               dp[1][i] = ne[0][i-1];
           }
           for(int i=2;i<=table;i++){
               dp[i][1] = 0;
           }
           
           for(int i=2;i<=table;i++){
               for(int j=2;j<=n;j++){
                   int best = (int)1e18;
                   for(int p=1;p<j;p++){
                       best = Math.min(best, dp[i-1][p]+ne[p][j-1]);
                       
           }
                   dp[i][j] = best;
               }
           }
           for(table=1;table<=100;table++){
               ans = Math.min(table*k + dp[table][n],ans);
           }
           System.out.println(ans);
       }
        
    }
}
